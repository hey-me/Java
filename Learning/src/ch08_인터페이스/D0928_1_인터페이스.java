package ch08_인터페이스;

public class D0928_1_인터페이스 {
/*	*인터페이스
		객체의 사용 방법을 정의한 타입.
		다형성을 구현할 수 있다.
		개발 코드를 수정하지 않으면서 객체 교환 가능.

	*인터페이스 선언      
		모두 추상메소드 (미완성) 
		** 반드시 하위 클래스에서 오버라이딩해야됨.
		객체로 생성할 수 없으므로 생성자를 가질 수 없다.
		
		(public abstract 생략되어있음)	interface 인터페이스이름 {
			// 상수 //필드 //생성자없음
			타입 상수이름 = 값;
			//추상메소드
			타입 메소드이름(매개변수,..)    // 중괄호 적으면 안됨.
			}
		
		[public static final] 타입 상수이름 = 값;     호출은 상수이름.인스턴스  ..?  
		=> 인터페이스 내에 쓰므로 ..타입 상수이름 = 값;.. 만 적기.
		
		클래스는 필드, 생성자, 메소드
		인터페이스는 상수, 추상메소드 (인터페이스 내 추상메소드는 abstract 붙일 필요 없이 바로 타입 적고, 중괄호 안 적음.)
		
		
	*인터페이스 구현 ... 인터페이스의 참조변수를 필드나 메소드 내에서 쓸 수 있음. ex) RemoteControl rc = new Television();
	**	implement 클래스
		인터페이스에서 정의된 추상케소드를 재정의해서 실행내용을 가지고 있는 클래스
	**	오버라이딩할때 public 꼭 붙여줘야됨. 
		
	*다중 인터페이스 구현 클래스    //  A, B, C, ... 여러개 구현 가능.  
		public class 구현클래스이름 implements 인터페이스A, 인터페이스B {
		//인터페이스A에 선언된 추상 메소드의 실체 메소드 선언
		//인터페이스B에 선언된 추상 메소드의 실체 메소드 선언
		}
	
	
	




*/

	public static void main(String[] args) {

	}

}
