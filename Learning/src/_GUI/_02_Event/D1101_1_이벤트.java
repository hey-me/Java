package _GUI._02_Event;

public class D1101_1_이벤트 {
/*	*이벤트 기반 프로그래밍
		
		*이벤트 종류 : 사용자의 입력
		 센서의 입력, 네트워크로부터 데이터 송수신.
		 다른 응용프로그램이나 스레드로부터 메세지
		
		*이벤트의 발생에 의해 프로그램 흐름이 결정되는 방식 .. 클릭이나 입력에 따라.
		 이벤트 발생시 코드(루틴(이벤트 리스너)) 실행 
		 프로그램 내의 어떤 코드가 언제 실행될지 이벤트 발생에 의해 전적으로 결정
		
		*배치실행 (이벤트와 반대되는 개념임.) =>이제까지 이렇게 코드 작성함.
		 : 개발자가 프로그램의 흐름을 결정
		 
	*이벤트 기반 프로그램의 구조 : 이벤트 리스너들의 집합
	
	*이벤트 처리 순서
		1.이벤트 발생:마우스나 키보드 움직임, 입력
		2.이벤트 객체 생성:현재 발생한 이벤트에 대한 정보를 가진 객체. virtual Machine이 생성함.
		3.이벤트 리스너 찾기 => 내가 작성해줘야됨. 인터페이스..
		4.이벤트 리스너 호출:이벤트 객체가 리스너에 전달됨.
		5.이벤트 리스너 실행
		
		Mouse Event, Action Event <= 마우스로 클릭, 선택
		Mouse Event, Container Event <= 마우스로 윈도우 크기 조절
		Key Event <= 키보드 입력
		Key Event, Action Event <=키보드로 메뉴선택
	
		*발생한 이벤트는 'Action이벤트'이고, 
		 이벤트 소스(이벤트가 발생한 컴포넌트)는 'JButton'이며, 
		 이벤트 객체(이벤트에 대한 정보 : 이벤트 종류, 소스, 좌표, 키, 버튼 종류 등)는 'ActionEvent'이고, 
		 이벤트 리스너(이벤트를 처리하는 코드)는 '이벤트 리스너4'입니다.
	
	*이벤트 분배 스레드
		-동작
			1.자바가상기계로부터 이벤트 발생을 통지받음
			2.이벤트 소스와 종류 결정
			3.이벤트 객체 생성, 리스너 찾아 호출
		-무한 루프를 실행하는 스레드임.
	
	*이벤트 객체(클래스) 종류 => 액션이벤트, 마우스이벤트, 텍스트이벤트, 키 이벤트 등등
	
	이벤트 소스 알아내기 Object EventObject.getSource();
	=> 캐스팅하여 사용
	
	 *이벤트 리스너 작성방법
		 1.독립클래스로 작성 = 여러곳에서 쓸때 적합
		 2.내부클래스로 작성 = 특정클래스에서 사용할때만
		 3.익명클래스로 작성 
		 
	btn.addActionListener(new MyActionListener());
	=> 리스너를 구현해 둔 클래스 인스턴스를 괄호안에 적어주기.	 

	처리할 것이 많아지면 스레드 이용
	
	adapter클래스 => 이벤트클래스내에 메소드 안쓰는건 구현안해도 되게 만들어줌, 필요한것만 구현




*/	
	public static void main(String[] args) {

		
	}

}
